name: Core WebServ Testing

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run nightly tests
    - cron: '0 2 * * *'

jobs:
  core-functionality:
    name: Core Functionality Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl
    
    - name: Build project (Debug)
      run: |
        export CXX=g++
        export CXXFLAGS="-Wall -Wextra -Werror -g -O0"
        make clean
        make all
    
    - name: Validate executable
      run: |
        file ./webserv
        ldd ./webserv
        ls -la ./webserv
    
    - name: Test configuration file parsing
      run: |
        echo "Testing configuration file validation..."
        
        # Test with valid config
        timeout 3s ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 1
        
        if kill -0 $SERVER_PID 2>/dev/null; then
          echo "✅ Configuration file parsed successfully"
          kill $SERVER_PID 2>/dev/null || true
        else
          echo "❌ Configuration file parsing failed"
          exit 1
        fi
        
        # Test with invalid config (should fail gracefully)
        echo "invalid config content" > invalid.conf
        timeout 3s ./webserv invalid.conf || echo "✅ Invalid config properly rejected"
        rm -f invalid.conf
    
    - name: Test server startup and shutdown
      run: |
        echo "Testing server lifecycle..."
        
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 2
        
        # Check if server is running
        if kill -0 $SERVER_PID 2>/dev/null; then
          echo "✅ Server started successfully"
          
          # Test graceful shutdown
          kill -TERM $SERVER_PID 2>/dev/null || true
          sleep 1
          
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "✅ Server shutdown gracefully"
          else
            echo "⚠️ Server required force kill"
            kill -KILL $SERVER_PID 2>/dev/null || true
          fi
        else
          echo "❌ Server failed to start"
          exit 1
        fi

  http-methods-tests:
    name: HTTP Methods Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        http-method: [GET, POST, DELETE]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl
    
    - name: Build optimized version
      run: |
        export CXX=g++
        export CXXFLAGS="-Wall -Wextra -Werror -O2 -DNDEBUG"
        make clean
        make all
    
    - name: Test ${{ matrix.http-method }} method
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        case "${{ matrix.http-method }}" in
          "GET")
            echo "=== Comprehensive GET Method Testing ==="
            
            # Test root path
            echo "Testing GET /"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/)
            echo "GET / - Status: $STATUS"
            
            # Test index page
            echo "Testing GET /index.html"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/index.html)
            echo "GET /index.html - Status: $STATUS"
            
            # Test static CSS file
            echo "Testing GET /css/style.css"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/css/style.css)
            echo "GET /css/style.css - Status: $STATUS"
            
            # Test static JS file
            echo "Testing GET /js/script.js"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/js/script.js)
            echo "GET /js/script.js - Status: $STATUS"
            
            # Test static image
            echo "Testing GET /images/1.jpg"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/images/1.jpg)
            echo "GET /images/1.jpg - Status: $STATUS"
            
            # Test directory listing
            echo "Testing GET /images/"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/images/)
            echo "GET /images/ - Status: $STATUS"
            
            # Test blog pages
            echo "Testing GET /blog/"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/blog/)
            echo "GET /blog/ - Status: $STATUS"
            
            echo "Testing GET /blog/post1.html"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/blog/post1.html)
            echo "GET /blog/post1.html - Status: $STATUS"
            
            # Test admin pages
            echo "Testing GET /admin/"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/admin/)
            echo "GET /admin/ - Status: $STATUS"
            
            # Test download files
            echo "Testing GET /downloads/sample.txt"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/downloads/sample.txt)
            echo "GET /downloads/sample.txt - Status: $STATUS"
            
            # Test robots.txt and sitemap.xml
            echo "Testing GET /robots.txt"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/robots.txt)
            echo "GET /robots.txt - Status: $STATUS"
            
            echo "Testing GET /sitemap.xml"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://localhost:8080/sitemap.xml)
            echo "GET /sitemap.xml - Status: $STATUS"
            ;;
            
          "POST")
            echo "=== Comprehensive POST Method Testing ==="
            
            # Test POST to root with form data
            echo "Testing POST / with form data"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/ -d "name=test&value=data")
            echo "POST / (form data) - Status: $STATUS"
            
            # Test POST with JSON data
            echo "Testing POST / with JSON"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/ -H "Content-Type: application/json" -d '{"test": "data"}')
            echo "POST / (JSON) - Status: $STATUS"
            
            # Test POST to admin upload
            echo "Testing POST /admin/ (upload simulation)"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/admin/ -d "upload=testfile&content=testdata")
            echo "POST /admin/ (upload) - Status: $STATUS"
            
            # Test POST with large data
            echo "Testing POST / with large data"
            LARGE_DATA=$(printf 'x%.0s' {1..1000})
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/ -d "data=$LARGE_DATA")
            echo "POST / (large data) - Status: $STATUS"
            
            # Test POST with multipart form data
            echo "Testing POST / with multipart data"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/ -F "file=@README.md" -F "name=testupload")
            echo "POST / (multipart) - Status: $STATUS"
            
            # Test POST to different endpoints
            echo "Testing POST /blog/"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/blog/ -d "title=test&content=blog post")
            echo "POST /blog/ - Status: $STATUS"
            
            # Test POST with empty data
            echo "Testing POST / with empty data"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/)
            echo "POST / (empty) - Status: $STATUS"
            
            # Test POST with different content types
            echo "Testing POST / with text/plain"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/ -H "Content-Type: text/plain" -d "plain text data")
            echo "POST / (text/plain) - Status: $STATUS"
            ;;
            
          "DELETE")
            echo "=== Comprehensive DELETE Method Testing ==="
            
            # First create some test files to delete (if server supports it)
            echo "Creating test files for deletion..."
            curl -s -X POST http://localhost:8080/admin/ -d "filename=test_delete_1.txt&content=test" > /dev/null || true
            curl -s -X POST http://localhost:8080/admin/ -d "filename=test_delete_2.txt&content=test" > /dev/null || true
            
            # Test DELETE on uploaded files
            echo "Testing DELETE /admin/test_delete_1.txt"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE http://localhost:8080/admin/test_delete_1.txt)
            echo "DELETE /admin/test_delete_1.txt - Status: $STATUS"
            
            echo "Testing DELETE /admin/test_delete_2.txt"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE http://localhost:8080/admin/test_delete_2.txt)
            echo "DELETE /admin/test_delete_2.txt - Status: $STATUS"
            
            # Test DELETE on non-existent files (should return 404)
            echo "Testing DELETE /admin/nonexistent.txt"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE http://localhost:8080/admin/nonexistent.txt)
            echo "DELETE /admin/nonexistent.txt - Status: $STATUS"
            
            # Test DELETE on existing uploaded files (check directory)
            for file in /home/runner/work/webserv/webserv/www/admin/upload_* 2>/dev/null; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                echo "Testing DELETE /admin/$filename"
                STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE http://localhost:8080/admin/$filename)
                echo "DELETE /admin/$filename - Status: $STATUS"
                break
              fi
            done || echo "No existing upload files found to test deletion"
            
            # Test DELETE on different paths
            echo "Testing DELETE /"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE http://localhost:8080/)
            echo "DELETE / - Status: $STATUS"
            
            echo "Testing DELETE /blog/"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE http://localhost:8080/blog/)
            echo "DELETE /blog/ - Status: $STATUS"
            
            # Test DELETE with query parameters
            echo "Testing DELETE /admin/?file=test.txt"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "http://localhost:8080/admin/?file=test.txt")
            echo "DELETE /admin/?file=test.txt - Status: $STATUS"
            
            # Test DELETE on protected files (should return 403 or 405)
            echo "Testing DELETE /css/style.css"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE http://localhost:8080/css/style.css)
            echo "DELETE /css/style.css - Status: $STATUS"
            ;;
        esac
        
        echo "=== ${{ matrix.http-method }} Method Testing Completed ==="
        
        kill $SERVER_PID 2>/dev/null || true
        wait $SERVER_PID 2>/dev/null || true

  error-handling-tests:
    name: Error Handling Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        error-category:
          - client-errors-4xx
          - server-errors-5xx
          - custom-scenarios
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl python3
    
    - name: Build project
      run: |
        export CXX=g++
        make clean
        make all
    
    - name: Test ${{ matrix.error-category }}
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        case "${{ matrix.error-category }}" in
          "client-errors-4xx")
            echo "Testing 4xx Client Error responses..."
            
            # 400 Bad Request - Invalid HTTP syntax
            echo -e "INVALID HTTP REQUEST\r\n\r\n" | nc localhost 8080 || echo "400 Bad Request test attempted"
            
            # 401 Unauthorized - Access without credentials
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/admin/restricted)
            echo "401 Unauthorized test - Status: $STATUS"
            
            # 403 Forbidden - Access denied
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/admin/)
            echo "403 Forbidden test - Status: $STATUS"
            
            # 404 Not Found - Non-existent resource
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/nonexistent)
            echo "404 Not Found test - Status: $STATUS"
            
            # 405 Method Not Allowed - Unsupported method
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X PATCH http://localhost:8080/)
            echo "405 Method Not Allowed test - Status: $STATUS"
            
            # 408 Request Timeout - Slow request
            timeout 5s bash -c 'exec 3<>/dev/tcp/localhost/8080; echo -n "GET / HTTP/1.1" >&3; sleep 10' || echo "408 Request Timeout test attempted"
            
            # 411 Length Required - POST without Content-Length
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/ -H "Transfer-Encoding: " --data-raw "test")
            echo "411 Length Required test - Status: $STATUS"
            
            # 413 Payload Too Large - Large request body
            LARGE_DATA=$(python3 -c "print('x' * 100000)")
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/ -d "$LARGE_DATA")
            echo "413 Payload Too Large test - Status: $STATUS"
            
            # 414 URI Too Long - Very long URL
            LONG_URI=$(python3 -c "print('/' + 'x' * 5000)")
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8080$LONG_URI")
            echo "414 URI Too Long test - Status: $STATUS"
            
            # 415 Unsupported Media Type
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/ -H "Content-Type: application/unsupported" -d "test")
            echo "415 Unsupported Media Type test - Status: $STATUS"
            
            # 416 Range Not Satisfiable
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Range: bytes=999999-" http://localhost:8080/css/style.css)
            echo "416 Range Not Satisfiable test - Status: $STATUS"
            
            # 429 Too Many Requests - Rate limiting
            for i in {1..10}; do
              curl -s -o /dev/null http://localhost:8080/ &
            done
            wait
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
            echo "429 Too Many Requests test - Status: $STATUS"
            ;;
            
          "server-errors-5xx")
            echo "Testing 5xx Server Error responses..."
            
            # 500 Internal Server Error - Trigger server error
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/trigger-error)
            echo "500 Internal Server Error test - Status: $STATUS"
            
            # 501 Not Implemented - Unsupported feature
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X TRACE http://localhost:8080/)
            echo "501 Not Implemented test - Status: $STATUS"
            
            # 502 Bad Gateway - CGI error (if applicable)
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/cgi-bin/nonexistent.py)
            echo "502 Bad Gateway test - Status: $STATUS"
            
            # 503 Service Unavailable - Server overload simulation
            # Start multiple heavy requests simultaneously
            for i in {1..20}; do
              curl -s -o /dev/null http://localhost:8080/ &
            done
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
            echo "503 Service Unavailable test - Status: $STATUS"
            wait
            
            # 504 Gateway Timeout - CGI timeout
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 2 http://localhost:8080/cgi-bin/slow-script)
            echo "504 Gateway Timeout test - Status: $STATUS"
            
            # 505 HTTP Version Not Supported
            echo -e "GET / HTTP/2.0\r\nHost: localhost\r\n\r\n" | nc localhost 8080 || echo "505 HTTP Version Not Supported test attempted"
            ;;
            
          "custom-scenarios")
            echo "Testing custom error scenarios..."
            
            # Test error page content delivery
            RESPONSE=$(curl -s http://localhost:8080/nonexistent)
            if echo "$RESPONSE" | grep -q "404\|Not Found\|Error"; then
              echo "✅ 404 error page content delivered"
            else
              echo "⚠️ 404 error page content not found"
            fi
            
            # Test error page CSS
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/errors/style.css)
            echo "Error page CSS test - Status: $STATUS"
            
            # Test multiple rapid errors
            for i in {1..5}; do
              curl -s -o /dev/null http://localhost:8080/nonexistent$i &
            done
            wait
            echo "Multiple rapid errors test completed"
            
            # Test error persistence - server should remain stable
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "404" ]; then
              echo "✅ Server stable after error scenarios"
            else
              echo "⚠️ Server instability detected after errors"
            fi
            ;;
        esac
        
        kill $SERVER_PID 2>/dev/null || true
        wait $SERVER_PID 2>/dev/null || true

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential apache2-utils curl
    
    - name: Build optimized version
      run: |
        export CXX=g++
        export CXXFLAGS="-Wall -Wextra -Werror -O2 -DNDEBUG -march=native"
        make clean
        make all
    
    - name: Concurrent connection test
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        echo "Testing concurrent connections..."
        
        # Light load test
        ab -n 100 -c 5 http://localhost:8080/ || echo "Light load test completed"
        
        # Medium load test
        ab -n 500 -c 10 http://localhost:8080/ || echo "Medium load test completed"
        
        # Heavy load test
        ab -n 1000 -c 20 http://localhost:8080/ || echo "Heavy load test completed"
        
        kill $SERVER_PID
    
    - name: Static file serving performance
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        echo "Testing static file performance..."
        
        # CSS file performance
        ab -n 200 -c 5 http://localhost:8080/css/style.css || echo "CSS performance test completed"
        
        # Image file performance  
        ab -n 100 -c 3 http://localhost:8080/images/1.jpg || echo "Image performance test completed"
        
        kill $SERVER_PID
    
    - name: Custom load testing
      run: |
        export TEST_REQUESTS=100
        export TEST_CONCURRENCY=10
        export TEST_TIMEOUT=30
        chmod +x scripts/load_test.sh
        ./scripts/load_test.sh || echo "Custom load test completed"

  server-behavior-tests:
    name: Server Behavior Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl netcat-openbsd
    
    - name: Build project
      run: |
        export CXX=g++
        make clean
        make all
    
    - name: Test connection handling
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        echo "Testing connection behavior..."
        
        # Test keep-alive connections
        curl -H "Connection: keep-alive" http://localhost:8080/ || echo "Keep-alive test attempted"
        
        # Test connection close
        curl -H "Connection: close" http://localhost:8080/ || echo "Connection close test attempted"
        
        # Test multiple rapid connections
        for i in {1..5}; do
          curl -s http://localhost:8080/ > /dev/null &
        done
        wait
        echo "Rapid connections test completed"
        
        kill $SERVER_PID
    
    - name: Test resource limits
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        echo "Testing resource limits..."
        
        # Test timeout behavior
        timeout 10s nc localhost 8080 << EOF || echo "Timeout test completed"
GET / HTTP/1.1
Host: localhost

EOF
        
        kill $SERVER_PID 2>/dev/null || true

  error-pages-validation:
    name: Error Pages Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl netcat-openbsd
    
    - name: Build project
      run: |
        export CXX=g++
        make clean
        make all
    
    - name: Validate error page files
      run: |
        echo "Validating error page files..."
        
        # Check if all error pages exist
        ERROR_PAGES=(400 401 402 403 404 405 408 411 413 414 415 416 429 500 501 502 503 504 505)
        
        for code in "${ERROR_PAGES[@]}"; do
          if [ -f "www/errors/${code}.html" ]; then
            echo "✅ Error page ${code}.html exists"
            
            # Check if page has basic HTML structure
            if grep -q "<html>\|<HTML>" "www/errors/${code}.html" && \
               grep -q "<head>\|<HEAD>" "www/errors/${code}.html" && \
               grep -q "<body>\|<BODY>" "www/errors/${code}.html"; then
              echo "  ✅ Valid HTML structure"
            else
              echo "  ⚠️ Missing HTML structure"
            fi
            
            # Check if error code is mentioned in the page
            if grep -q "$code" "www/errors/${code}.html"; then
              echo "  ✅ Error code $code mentioned in page"
            else
              echo "  ⚠️ Error code $code not found in page content"
            fi
          else
            echo "❌ Error page ${code}.html missing"
          fi
        done
        
        # Check error page CSS
        if [ -f "www/errors/style.css" ]; then
          echo "✅ Error page stylesheet exists"
        else
          echo "❌ Error page stylesheet missing"
        fi
    
    - name: Test error page delivery
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        echo "Testing error page content delivery..."
        
        # Test 404 page delivery and content
        RESPONSE=$(curl -s http://localhost:8080/nonexistent-test-file)
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/nonexistent-test-file)
        
        echo "404 Response Status: $STATUS"
        
        if echo "$RESPONSE" | grep -q "404\|Not Found"; then
          echo "✅ 404 error page content contains error information"
        else
          echo "⚠️ 404 error page content may be missing error information"
        fi
        
        # Test if custom error page is served (not default server page)
        if echo "$RESPONSE" | grep -q "webserv\|WebServ\|Error"; then
          echo "✅ Custom error page appears to be served"
        else
          echo "⚠️ Default error page may be served instead of custom"
        fi
        
        # Test error page CSS accessibility
        CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/errors/style.css)
        echo "Error page CSS Status: $CSS_STATUS"
        
        if [ "$CSS_STATUS" = "200" ]; then
          echo "✅ Error page CSS is accessible"
        else
          echo "⚠️ Error page CSS not accessible via HTTP"
        fi
        
        # Test multiple error scenarios for consistency
        echo "Testing error response consistency..."
        
        for i in {1..3}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/test-error-$i)
          echo "Consistency test $i - Status: $STATUS"
        done
        
        kill $SERVER_PID 2>/dev/null || true

  comprehensive-http-methods:
    name: Comprehensive HTTP Methods Testing
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl
    
    - name: Build project
      run: |
        export CXX=g++
        make clean
        make all
    
    - name: Test all HTTP methods comprehensively
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        echo "=== Comprehensive HTTP Methods Testing ==="
        
        # Test all methods on root
        echo "--- Testing All Methods on Root ---"
        curl -s -o /dev/null -w "GET / -> %{http_code}\n" -X GET http://localhost:8080/
        curl -s -o /dev/null -w "POST / -> %{http_code}\n" -X POST http://localhost:8080/ -d "test=data"
        curl -s -o /dev/null -w "DELETE / -> %{http_code}\n" -X DELETE http://localhost:8080/
        curl -s -o /dev/null -w "PUT / -> %{http_code}\n" -X PUT http://localhost:8080/ -d "test=data"
        curl -s -o /dev/null -w "HEAD / -> %{http_code}\n" -X HEAD http://localhost:8080/
        curl -s -o /dev/null -w "OPTIONS / -> %{http_code}\n" -X OPTIONS http://localhost:8080/
        curl -s -o /dev/null -w "PATCH / -> %{http_code}\n" -X PATCH http://localhost:8080/ -d "test=data"
        
        # Test GET on all static resources
        echo "--- Testing GET on Static Resources ---"
        curl -s -o /dev/null -w "GET /index.html -> %{http_code}\n" http://localhost:8080/index.html
        curl -s -o /dev/null -w "GET /about.html -> %{http_code}\n" http://localhost:8080/about.html
        curl -s -o /dev/null -w "GET /contact.html -> %{http_code}\n" http://localhost:8080/contact.html
        curl -s -o /dev/null -w "GET /css/style.css -> %{http_code}\n" http://localhost:8080/css/style.css
        curl -s -o /dev/null -w "GET /js/script.js -> %{http_code}\n" http://localhost:8080/js/script.js
        curl -s -o /dev/null -w "GET /images/1.jpg -> %{http_code}\n" http://localhost:8080/images/1.jpg
        curl -s -o /dev/null -w "GET /robots.txt -> %{http_code}\n" http://localhost:8080/robots.txt
        curl -s -o /dev/null -w "GET /sitemap.xml -> %{http_code}\n" http://localhost:8080/sitemap.xml
        
        # Test POST variations
        echo "--- Testing POST Variations ---"
        curl -s -o /dev/null -w "POST form-data -> %{http_code}\n" -X POST -d "key=value&name=test" http://localhost:8080/
        curl -s -o /dev/null -w "POST JSON -> %{http_code}\n" -X POST -H "Content-Type: application/json" -d '{"test":"data"}' http://localhost:8080/
        curl -s -o /dev/null -w "POST text -> %{http_code}\n" -X POST -H "Content-Type: text/plain" -d "plain text" http://localhost:8080/
        curl -s -o /dev/null -w "POST multipart -> %{http_code}\n" -X POST -F "file=test" -F "name=upload" http://localhost:8080/
        curl -s -o /dev/null -w "POST to /admin/ -> %{http_code}\n" -X POST http://localhost:8080/admin/ -d "upload=test"
        
        # Test DELETE scenarios
        echo "--- Testing DELETE Scenarios ---"
        curl -s -o /dev/null -w "DELETE /admin/test -> %{http_code}\n" -X DELETE http://localhost:8080/admin/test
        curl -s -o /dev/null -w "DELETE nonexistent -> %{http_code}\n" -X DELETE http://localhost:8080/nonexistent
        curl -s -o /dev/null -w "DELETE static file -> %{http_code}\n" -X DELETE http://localhost:8080/css/style.css
        
        # Test with query parameters
        echo "--- Testing Query Parameters ---"
        curl -s -o /dev/null -w "GET with params -> %{http_code}\n" "http://localhost:8080/?param=value&test=123"
        curl -s -o /dev/null -w "POST with params -> %{http_code}\n" -X POST "http://localhost:8080/?action=upload" -d "data=test"
        
        # Test edge cases
        echo "--- Testing Edge Cases ---"
        LONG_URL=$(printf 'test%.0s' {1..100})
        curl -s -o /dev/null -w "Long URL -> %{http_code}\n" "http://localhost:8080/$LONG_URL"
        curl -s -o /dev/null -w "Special chars -> %{http_code}\n" "http://localhost:8080/test%20file%21.html"
        curl -s -o /dev/null -w "Empty POST -> %{http_code}\n" -X POST http://localhost:8080/
        
        echo "=== HTTP Methods Testing Complete ==="
        
        kill $SERVER_PID 2>/dev/null || true