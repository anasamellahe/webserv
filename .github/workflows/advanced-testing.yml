name: Advanced Testing

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run nightly tests
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential lcov
    
    - name: Build with coverage
      run: |
        export CXXFLAGS="-Wall -Wextra -Werror -g -O0 --coverage"
        export LDFLAGS="--coverage"
        make clean
        make all
    
    - name: Run unit tests (if any exist)
      run: |
        # Add your unit tests here when implemented
        echo "Unit tests would run here"
    
    - name: Generate coverage report
      run: |
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-scenario:
          - basic-http
          - cgi-scripts  
          - file-serving
          - error-handling
          - chunked-transfer
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl python3 php-cgi perl
    
    - name: Build project
      run: make all
    
    - name: Run integration tests
      run: |
        case "${{ matrix.test-scenario }}" in
          "basic-http")
            echo "Testing basic HTTP functionality..."
            ./webserv src/config.conf &
            SERVER_PID=$!
            sleep 2
            
            # Test basic GET request
            curl -f http://localhost:8080/ || exit 1
            
            # Test 404 handling
            curl -f http://localhost:8080/nonexistent || [ $? -eq 22 ]
            
            kill $SERVER_PID
            ;;
            
          "cgi-scripts")
            echo "Testing CGI scripts..."
            ./webserv src/config.conf &
            SERVER_PID=$!
            sleep 2
            
            # Test Python CGI
            curl -f http://localhost:8080/cgi-bin/hello.py || echo "Python CGI test"
            
            # Test PHP CGI  
            curl -f http://localhost:8080/cgi-bin/info.php || echo "PHP CGI test"
            
            # Test Perl CGI
            curl -f http://localhost:8080/cgi-bin/test.pl || echo "Perl CGI test"
            
            kill $SERVER_PID
            ;;
            
          "file-serving")
            echo "Testing file serving..."
            ./webserv src/config.conf &
            SERVER_PID=$!
            sleep 2
            
            # Test static file serving
            curl -f http://localhost:8080/css/style.css || echo "CSS serving test"
            curl -f http://localhost:8080/js/script.js || echo "JS serving test"
            curl -f http://localhost:8080/images/1.jpg || echo "Image serving test"
            
            kill $SERVER_PID
            ;;
            
          "error-handling")
            echo "Testing error handling..."
            ./webserv src/config.conf &
            SERVER_PID=$!
            sleep 2
            
            # Test various error codes
            curl -w "%{http_code}" http://localhost:8080/nonexistent | grep -q "404"
            
            kill $SERVER_PID
            ;;
            
          "chunked-transfer")
            echo "Testing chunked transfer encoding..."
            ./webserv src/config.conf &
            SERVER_PID=$!
            sleep 2
            
            # Test chunked transfer
            curl -H "Transfer-Encoding: chunked" -d "test data" http://localhost:8080/ || echo "Chunked transfer test"
            
            kill $SERVER_PID
            ;;
        esac

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential apache2-utils
    
    - name: Build optimized version
      run: |
        export CXXFLAGS="-Wall -Wextra -Werror -O2 -DNDEBUG"
        make clean
        make all
    
    - name: Run Apache Bench tests
      run: |
        ./webserv src/config.conf &
        SERVER_PID=$!
        sleep 3
        
        # Basic performance test
        ab -n 1000 -c 10 http://localhost:8080/ || echo "Performance test completed"
        
        # Static file performance test  
        ab -n 500 -c 5 http://localhost:8080/css/style.css || echo "Static file test completed"
        
        kill $SERVER_PID
    
    - name: Custom load test
      run: |
        export TEST_REQUESTS=200
        export TEST_CONCURRENCY=20
        export TEST_TIMEOUT=60
        chmod +x scripts/load_test.sh
        ./scripts/load_test.sh

  cross-platform:
    name: Cross Platform Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [g++, clang++]
        exclude:
          - os: macos-latest
            compiler: g++
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
    
    - name: Build project
      run: |
        export CXX=${{ matrix.compiler }}
        make clean
        make all
    
    - name: Test executable
      run: |
        ./webserv --help || true
        file ./webserv